/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.33.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ListingStatus, ConfigResponse, Addr, ListingResponse, Listing, ListingsResponse, UserListingsResponse } from "./CowrieMarketplace.types";
export interface CowrieMarketplaceMessage {
  contractAddress: string;
  sender: string;
  createListing: ({
    description,
    imageUrl,
    price,
    title,
    tokenDenom
  }: {
    description: string;
    imageUrl: string;
    price: Uint128;
    title: string;
    tokenDenom: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateListing: ({
    description,
    imageUrl,
    listingId,
    price,
    title
  }: {
    description?: string;
    imageUrl?: string;
    listingId: number;
    price?: Uint128;
    title?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelListing: ({
    listingId
  }: {
    listingId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  buyItem: ({
    listingId
  }: {
    listingId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    commissionRate
  }: {
    commissionRate?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CowrieMarketplaceMessageComposer implements CowrieMarketplaceMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createListing = this.createListing.bind(this);
    this.updateListing = this.updateListing.bind(this);
    this.cancelListing = this.cancelListing.bind(this);
    this.buyItem = this.buyItem.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  createListing = ({
    description,
    imageUrl,
    price,
    title,
    tokenDenom
  }: {
    description: string;
    imageUrl: string;
    price: Uint128;
    title: string;
    tokenDenom: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_listing: {
            description,
            image_url: imageUrl,
            price,
            title,
            token_denom: tokenDenom
          }
        })),
        funds: _funds
      })
    };
  };
  updateListing = ({
    description,
    imageUrl,
    listingId,
    price,
    title
  }: {
    description?: string;
    imageUrl?: string;
    listingId: number;
    price?: Uint128;
    title?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_listing: {
            description,
            image_url: imageUrl,
            listing_id: listingId,
            price,
            title
          }
        })),
        funds: _funds
      })
    };
  };
  cancelListing = ({
    listingId
  }: {
    listingId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_listing: {
            listing_id: listingId
          }
        })),
        funds: _funds
      })
    };
  };
  buyItem = ({
    listingId
  }: {
    listingId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          buy_item: {
            listing_id: listingId
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    commissionRate
  }: {
    commissionRate?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            commission_rate: commissionRate
          }
        })),
        funds: _funds
      })
    };
  };
}