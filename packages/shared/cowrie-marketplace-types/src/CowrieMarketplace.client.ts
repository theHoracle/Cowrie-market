/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ListingStatus, ConfigResponse, Addr, ListingResponse, Listing, ListingsResponse, UserListingsResponse } from "./CowrieMarketplace.types";
export interface CowrieMarketplaceReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  getListing: ({
    listingId
  }: {
    listingId: number;
  }) => Promise<ListingResponse>;
  getListings: ({
    limit,
    startAfter,
    status
  }: {
    limit?: number;
    startAfter?: number;
    status?: ListingStatus;
  }) => Promise<ListingsResponse>;
  getUserListings: ({
    limit,
    seller,
    startAfter
  }: {
    limit?: number;
    seller: string;
    startAfter?: number;
  }) => Promise<UserListingsResponse>;
}
export class CowrieMarketplaceQueryClient implements CowrieMarketplaceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getListing = this.getListing.bind(this);
    this.getListings = this.getListings.bind(this);
    this.getUserListings = this.getUserListings.bind(this);
  }
  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getListing = async ({
    listingId
  }: {
    listingId: number;
  }): Promise<ListingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_listing: {
        listing_id: listingId
      }
    });
  };
  getListings = async ({
    limit,
    startAfter,
    status
  }: {
    limit?: number;
    startAfter?: number;
    status?: ListingStatus;
  }): Promise<ListingsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_listings: {
        limit,
        start_after: startAfter,
        status
      }
    });
  };
  getUserListings = async ({
    limit,
    seller,
    startAfter
  }: {
    limit?: number;
    seller: string;
    startAfter?: number;
  }): Promise<UserListingsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_listings: {
        limit,
        seller,
        start_after: startAfter
      }
    });
  };
}
export interface CowrieMarketplaceInterface extends CowrieMarketplaceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createListing: ({
    description,
    imageUrl,
    price,
    title,
    tokenDenom
  }: {
    description: string;
    imageUrl: string;
    price: Uint128;
    title: string;
    tokenDenom: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateListing: ({
    description,
    imageUrl,
    listingId,
    price,
    title
  }: {
    description?: string;
    imageUrl?: string;
    listingId: number;
    price?: Uint128;
    title?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancelListing: ({
    listingId
  }: {
    listingId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  buyItem: ({
    listingId
  }: {
    listingId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    commissionRate
  }: {
    commissionRate?: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class CowrieMarketplaceClient extends CowrieMarketplaceQueryClient implements CowrieMarketplaceInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createListing = this.createListing.bind(this);
    this.updateListing = this.updateListing.bind(this);
    this.cancelListing = this.cancelListing.bind(this);
    this.buyItem = this.buyItem.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }
  createListing = async ({
    description,
    imageUrl,
    price,
    title,
    tokenDenom
  }: {
    description: string;
    imageUrl: string;
    price: Uint128;
    title: string;
    tokenDenom: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_listing: {
        description,
        image_url: imageUrl,
        price,
        title,
        token_denom: tokenDenom
      }
    }, fee_, memo_, funds_);
  };
  updateListing = async ({
    description,
    imageUrl,
    listingId,
    price,
    title
  }: {
    description?: string;
    imageUrl?: string;
    listingId: number;
    price?: Uint128;
    title?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_listing: {
        description,
        image_url: imageUrl,
        listing_id: listingId,
        price,
        title
      }
    }, fee_, memo_, funds_);
  };
  cancelListing = async ({
    listingId
  }: {
    listingId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_listing: {
        listing_id: listingId
      }
    }, fee_, memo_, funds_);
  };
  buyItem = async ({
    listingId
  }: {
    listingId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_item: {
        listing_id: listingId
      }
    }, fee_, memo_, funds_);
  };
  updateConfig = async ({
    commissionRate
  }: {
    commissionRate?: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        commission_rate: commissionRate
      }
    }, fee_, memo_, funds_);
  };
}